from aiogram.types import (InlineKeyboardButton, InlineKeyboardMarkup,
                           KeyboardButton, ReplyKeyboardMarkup)
from pytils.numeral import get_plural

from db.models import UserActivity, UserData
from text import rates

static_reg_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register_user")]
    ]
)
static_pay_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="user_payment")]
    ]
)


static_start_button = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üîÑ"),
            KeyboardButton(text="–°—Ç–∞—Ç—É—Å"),
            KeyboardButton(text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"),
            KeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞"),
        ],
        [
            KeyboardButton(text="–ü–æ–º–æ—â—å"),
            KeyboardButton(text="–ö–æ–º–∞–Ω–¥—ã"),
        ],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
)

static_support_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–ª–æ–∂–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="call_support")]
    ]
)
static_balance_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance")]
    ]
)

why_freezed_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ü–æ—á–µ–º—É –º–æ—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞?", callback_data="freeze_info"
            )
        ]
    ]
)
freeze_user_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="freeze_account"
            )
        ]
    ]
)


def get_account_keyboard(user_data: UserData):
    buttons = []
    match getattr(user_data, "active", None):
        case UserActivity.active | UserActivity.inactive:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="–ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="freeze_account_info"
                    )
                ]
            )
        case UserActivity.freezed:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="–†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="recover_account"
                    )
                ]
            )
        case _:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="–ó–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register_user"
                    )
                ]
            )
            return InlineKeyboardMarkup(inline_keyboard=buttons)

    buttons.extend(
        [
            [
                InlineKeyboardButton(
                    text="–ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", callback_data="user_configurations"
                )
            ],
            [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="user_payment")],
        ]
    )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_config_keyboard():
    buttons = []
    cfgs = []

    cfgs.append(
        [
            InlineKeyboardButton(text="TEXT", callback_data="create_conf_text"),
            InlineKeyboardButton(text="QR", callback_data="create_conf_qr"),
            InlineKeyboardButton(text="FILE", callback_data="create_conf_file"),
        ]
    )

    buttons.append(
        [
            InlineKeyboardButton(
                text="–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="create_configuration"
            ),
        ]
    )
    return (
        InlineKeyboardMarkup(inline_keyboard=buttons),
        InlineKeyboardMarkup(inline_keyboard=cfgs),
    )


# def get_pay_keyboard(month, stage):
#     buttons = [
#         [
#             InlineKeyboardButton(text="-1 –º–µ—Å.", callback_data="month_decr"),
#             InlineKeyboardButton(text="+1 –º–µ—Å.", callback_data="month_incr"),
#         ],
#         [
#             InlineKeyboardButton(text="-1 —É—Ä.", callback_data="stage_decr"),
#             InlineKeyboardButton(text="+1 —É—Ä.", callback_data="stage_incr"),
#         ],
#         [
#             InlineKeyboardButton(
#                 text=f"–û–ø–ª–∞—Ç–∏—Ç—å {get_plural(stage, '—É—Ä–æ–≤–µ–Ω—å, —É—Ä–æ–≤–Ω—è, —É—Ä–æ–≤–Ω–µ–π')} –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {get_plural(month, '–º–µ—Å—è—Ü, –º–µ—Å—è—Ü–∞, –º–µ—Å—è—Ü–µ–≤')}",
#                 callback_data="pay_sub",
#             )
#         ],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
# return keyboard


def get_subscr_buttons(user_data: UserData, force_rates=False):
    buttons = []
    my_rate = rates.get(user_data.stage, None)
    if my_rate or force_rates:
        for key, rate in rates.items():
            if rate == my_rate:
                prefix = "‚úÖ "
            elif not user_data.free and key == 0.3:
                prefix = "‚ùå "
            else:
                prefix = ""

            buttons.append(
                [
                    InlineKeyboardButton(
                        text=f"{prefix}{rate} —Ç–∞—Ä–∏—Ñ", callback_data=f"rate_info_{key}"
                    )
                ]
            )
        if not force_rates:
            buttons.append(
                [
                    InlineKeyboardButton(
                        text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance"
                    ),
                ],
            )
    else:
        buttons.extend(
            [
                [
                    InlineKeyboardButton(
                        text="–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="change_rate"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance"
                    ),
                ],
            ]
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_rate_button(rate: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ", callback_data=f"accept_rate_{rate}"
                )
            ]
        ]
    )


def get_pay_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="100", callback_data="pay_sub_100"),
            InlineKeyboardButton(text="250", callback_data="pay_sub_250"),
            InlineKeyboardButton(text="500", callback_data="pay_sub_500"),
            InlineKeyboardButton(text="1000", callback_data="pay_sub_1000"),
        ]
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_bug_report_url(name, user_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è",
                    url=f"http://assa.ddns.net/bot/bug/create?name={name}&telegram_id={user_id}",
                )
            ]
        ]
    )


def get_pay_url(sum, url):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ {get_plural(sum, '—Ä—É–±–ª—å, —Ä—É–±–ª—è, —Ä—É–±–ª–µ–π')}",
                    url=url,
                )
            ]
        ]
    )
