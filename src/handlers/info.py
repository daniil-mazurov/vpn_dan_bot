import logging
from contextlib import suppress
from typing import Union

from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters.command import Command
from aiogram.types import CallbackQuery, Message
from aiogram.utils.formatting import Bold, as_list, as_marked_section

import kb
import text
from core.exceptions import DatabaseError, WireguardError
from db.models import UserData
from db.utils import test_server_speed
from handlers.utils import find_user
from wg.utils import WgServerTools

logger = logging.getLogger()
router = Router()


async def more_help_info(callback: CallbackQuery):
    await callback.message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å! –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º. üöÄ",
        reply_markup=kb.get_help_menu(
            callback.from_user.full_name, callback.from_user.id
        ),
    )


async def change_help_page(message: Message, pages: list, page: int, prefix: str):
    with suppress(TelegramBadRequest):
        await message.edit_text(
            pages[page], reply_markup=kb.get_help_book_keyboard(pages, page, prefix)
        )


async def post_help_book(
    callback: CallbackQuery, book: list, step: str, start_message: str, prefix: str
):
    if step == "start":
        await callback.message.answer(start_message)

        await callback.message.answer(
            book[0],
            reply_markup=kb.get_help_book_keyboard(pages=book, page=0, prefix=prefix),
        )
    elif step.isdigit():
        await change_help_page(
            callback.message, pages=book, page=int(step), prefix=prefix
        )
    else:
        for step in book:
            await callback.message.answer(step)
        await more_help_info(callback)


@router.message(Command("help"))
@router.message(F.text == "–ü–æ–º–æ—â—å")
@router.callback_query(F.data == "main_help")
async def help_me(trigger: Union[Message, CallbackQuery]):
    await getattr(trigger, "message", trigger).answer(
        "–ß–µ–º –≤–∞–º –ø–æ–º–æ—á—å?",
        reply_markup=kb.get_help_menu(
            trigger.from_user.full_name, trigger.from_user.id
        ),
    )


@router.callback_query(F.data == "bot_info")
async def bot_info(callback: CallbackQuery):
    await callback.message.answer(text.BOT_INFO, reply_markup=kb.static_join_button)
    await more_help_info(callback)


@router.callback_query(F.data.startswith("first_help_info_"))
async def next_help(callback: CallbackQuery):
    current_step: str = callback.data.split("_")[-1]

    await post_help_book(
        callback,
        book=text.BOT_STEPS,
        step=current_step,
        start_message="ü§ñ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ? –í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –∏ WireGuard:</b>",
        prefix="first_help_info",
    )


@router.callback_query(F.data == "wg_help_info")
async def wg_help(callback: CallbackQuery):
    await callback.message.answer(
        "–ù–∞ –∫–∞–∫—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WireGuard?",
        reply_markup=kb.static_wg_platform_keyboard,
    )


@router.callback_query(F.data.startswith("wg_help_info_"))
async def wg_help_platform(callback: CallbackQuery):
    *_, current_platform, current_step = callback.data.split("_")

    await post_help_book(
        callback,
        book=text.WG_STEPS[current_platform],
        step=current_step,
        start_message=f"üõ†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WireGuard –Ω–∞ {current_platform}:</b>",
        prefix=f"wg_help_info_{current_platform}",
    )


@router.callback_query(F.data.startswith("error_help_info"))
async def error_help(callback: CallbackQuery):
    current_step: str = callback.data.split("_")[-1]

    await post_help_book(
        callback,
        book=text.BOT_ERROR_STEP,
        step=current_step,
        start_message="üìã <b>–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º —Å DanVPN</b>",
        prefix="error_help_info",
    )


@router.message(Command("time"))
async def started(message: Message, started_at):
    await message.answer(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {started_at}")


@router.message(Command("id"))
@router.callback_query(F.data == "user_id_info")
async def start_bot(trigger: Union[Message, CallbackQuery]):
    await getattr(trigger, "message", trigger).answer("–í–∞—à Telegram ID")
    await getattr(trigger, "message", trigger).answer(str(trigger.from_user.id))


@router.message(Command("cmd"))
@router.message(Command("commands"))
@router.message(F.text == "–ö–æ–º–∞–Ω–¥—ã")
@router.callback_query(F.data == "cmd_help_info")
async def commands_list(trigger: Union[Message, CallbackQuery]):
    help_t = as_list(
        Bold("–ó–∞–ø—É—Å–∫:"),
        "/start - –∑–∞–ø—É—Å–∫ (–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞) –±–æ—Ç–∞",
        Bold("–î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º:"),
        as_marked_section(
            "/account | /app - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–∫–∫–∞—É–Ω—Ç–∞",
            "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–î –ë–æ—Ç–∞",
            "/freeze - –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            "/recover - –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            marker="~ ",
        ),
        Bold("–î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏:"),
        as_marked_section(
            "/me | /config - –¥–∞–Ω–Ω—ã–µ –æ –º–æ–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö wireguard",
            "/create - —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            marker="~ ",
        ),
        Bold("–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:"),
        as_marked_section(
            "/sub - –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            "/refund - –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤–∞—Ä—Ç —Å—Ä–µ–¥—Å—Ç–≤",
            "/history - –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            marker="~ ",
        ),
        Bold("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"),
        as_marked_section(
            "/help - –ü–æ–º–æ—â—å",
            "/cmd - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
            "/admin - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "/bug - –î–æ–ª–æ–∂–∏—Ç—å –æ –±–∞–≥–µ",
            "/id - –í–∞—à Telegram ID",
            "/time - –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞",
            marker="~ ",
        ),
        as_marked_section(
            Bold("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ (—Ç–∞—Ä–∏—Ñ—ã –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏ –≤—ã—à–µ):"),
            "/server - –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞",
            "/speed - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å VPN –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
            "/mute - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–í –†–ê–ó–†–ê–ë–û–¢–ö–ï)",
        ),
    )

    await getattr(trigger, "message", trigger).answer(**help_t.as_kwargs())


@router.callback_query(F.data == "freeze_info")
async def freeze_config_info(callback: CallbackQuery):
    await callback.message.answer(
        "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞—é—Ç—Å—è, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏. "
        "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ? –°–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É?"
        "–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        "\n\n–ï—Å–ª–∏ –≤–∞–º –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ—á–µ–º—É –≤–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /bug –∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ."
    )


@router.callback_query(F.data == "freeze_account_info")
async def freeze_user_info(callback: CallbackQuery):
    await callback.message.answer(
        "–ó–∞–º–æ—Ä–æ–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π "
        "–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."
        "\n–†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é /app. –ü–æ—Å–ª–µ —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã."
        "\n\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —Ä–∞–≤–Ω–∞ –æ–¥–Ω–æ–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º—É —Å–ø–∏—Å–∞–Ω–∏—é –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞!</b>"
        "\n<b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞.</b>",
        reply_markup=kb.freeze_user_button,
    )


@router.message(Command("server"))
@router.callback_query(F.data == "server_status")
async def server_status(trigger: Union[Message, CallbackQuery], bot: Bot):
    await bot.send_chat_action(trigger.from_user.id, "typing")

    user_data: UserData = await find_user(trigger)
    if not user_data:
        return
    elif user_data.stage < 2:
        await getattr(trigger, "message", trigger).answer(
            "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –æ—Ç '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ' –∏–ª–∏ –≤—ã—à–µ."
        )
        return

    try:
        wg = WgServerTools()

        server_status = await wg.get_server_status()
        cpu_usage = await wg.get_server_—Åpu_usage()

    except WireguardError:
        await getattr(trigger, "message", trigger).answer(text.WG_ERROR)

    else:
        server_data = (
            "–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
            f"üñ• –°–µ—Ä–≤–µ—Ä:        <b>{server_status.capitalize()}</b>\n\n"
            f"ü¶æ –°PU usage:  <b>{cpu_usage}</b>"
        )

        await getattr(trigger, "message", trigger).answer(server_data)


@router.message(Command("speed"))
@router.callback_query(F.data == "server_speed")
async def server_speed(trigger: Union[Message, CallbackQuery], bot: Bot):
    await bot.send_chat_action(trigger.from_user.id, "typing")

    user_data: UserData = await find_user(trigger)
    if not user_data:
        return
    elif user_data.stage < 2:
        await getattr(trigger, "message", trigger).answer(
            "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –æ—Ç '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ' –∏–ª–∏ –≤—ã—à–µ."
        )
        return

    try:
        server_speed_in, server_speed_out = await test_server_speed()

    except WireguardError:
        await getattr(trigger, "message", trigger).answer(
            text.WG_ERROR, show_alert=True
        )
    except DatabaseError:
        await trigger.answer(text=text.DB_ERROR, show_alert=True)
    else:
        server_data = (
            "–¢–µ–∫—É—â–∞—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ VPN:\n\n"
            f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ:  <b>{round(float(server_speed_in)/(1048576),2)} –ú–±–∏—Ç/—Å</b>\n\n"
            f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞:         <b>{round(float(server_speed_out)/(1048576),2)} –ú–±–∏—Ç/—Å</b>"
        )

        await getattr(trigger, "message", trigger).answer(server_data)
