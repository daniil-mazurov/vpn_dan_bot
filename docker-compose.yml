services:

  ############################
  # MAIN
  ############################

  danvpn_builder:
    profiles: [ "special" ]
    build:
      context: .
      dockerfile: Dockerfile
    image: danvpn:latest
    container_name: danvpn-builder

  bot:
    image: danvpn:latest
    container_name: danvpn-bot
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - $DANVPN_VOLUME/danvpn/logs/:/vpn_dan_bot/logs
      - $DANVPN_VOLUME/danvpn/bugs/:/vpn_dan_bot/bugs
      - $DANVPN_VOLUME/danvpn/dumps/:/vpn_dan_bot/src/db/dumps
      - $DANVPN_VOLUME/danvpn/backups/:/vpn_dan_bot/src/db/backups
      - $DANVPN_VOLUME/danvpn/timepoint/:/vpn_dan_bot/src/scheduler/timepoint
    #      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      internal:
        ipv4_address: "$BOT_HOST"
    command: ./_main.py
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      website:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "ps -ef | grep _main.py | grep -v grep || exit 1" ]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  website:
    image: danvpn:latest
    container_name: danvpn-website
    environment:
      TZ: "Europe/Moscow"
      TEST_WEB: "http://$WEB_HOST:$WEB_PORT/test"
    volumes:
      - $DANVPN_VOLUME/danvpn/logs/:/vpn_dan_bot/logs
      - $DANVPN_VOLUME/danvpn/bugs/:/vpn_dan_bot/bugs
      - $DANVPN_VOLUME/danvpn/timepoint/:/vpn_dan_bot/src/scheduler/timepoint
    #      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      internal:
        ipv4_address: "$WEB_HOST"
    command: ./_serv.py
    restart: unless-stopped
    depends_on:
      nginx:
        condition: service_healthy
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f $$TEST_WEB || exit 1" ]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ############################
  # DanVPN - SERVICES
  ############################

  database:
    image: postgres:14.17-alpine3.21
    container_name: danvpn-postgres
    environment:
      TZ: "Europe/Moscow"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_secret
      POSTGRES_DB: "${DB_NAME}"
    secrets:
      - postgres_secret
    volumes:
      - $DANVPN_VOLUME/postgresql/data:/var/lib/postgresql/data
      # - ./.config/pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./.config/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      internal:
        ipv4_address: "${DB_HOST}"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "psql", "-U", "${DB_USER}", "-d", "${DB_NAME}", "-w", "-c", "SELECT 1;" ]
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7.4.2-alpine3.21
    container_name: danvpn-redis
    environment:
      TZ: "Europe/Moscow"
    secrets:
      - redis_secret
    volumes:
      - $DANVPN_VOLUME/redis/d–∞ta:/data
    networks:
      internal:
        ipv4_address: "$REDIS_HOST"
    command: [ "sh", "-c", "redis-server --appendonly yes --requirepass \"$(cat /run/secrets/redis_secret)\" --replica-read-only no --maxmemory 256mb --maxmemory-policy volatile-lru" ]
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "sh", "-c", "redis-cli -h localhost -a \"$(cat /run/secrets/redis_secret)\" ping | grep -q PONG || exit 1" ]
      interval: 1m
      timeout: 3s
      retries: 5
      start_period: 3s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ############################
  # INSTRUMENTS
  ############################

  speedtest:
    profiles: [ "special" ]
    build: ./src/iperf
    container_name: danvpn-speedtest
    environment:
      TZ: "Europe/Moscow"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    networks:
      - wgnet

  create_tables:
    profiles: [ "special" ]
    image: danvpn:latest
    container_name: danvpn-db-create
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - $DANVPN_VOLUME/danvpn/logs/:/vpn_dan_bot/logs
    networks:
      - internal
    command: .venv/bin/python ./src/scripts/db_recreate.py

  pgadmin:
    image: dpage/pgadmin4:9.2.0
    # image: nphung/pgadmin
    # image: fenglc/pgadmin4:2.1-python3.6-alpine
    container_name: pgadmin4
    environment:
      TZ: "Europe/Moscow"
      PGADMIN_LISTEN_PORT: "${PGADMIN_PORT}"
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_USER}"
      PGADMIN_DEFAULT_PASSWORD_FILE: /run/secrets/pgadmin_secret
      PGADMIN_SERVER_JSON_FILE: '/pgadmin4/servers.json'
      TEST_WEB: "${PGADMIN_HOST}:${PGADMIN_PORT}/pgadmin"
    secrets:
      - pgadmin_secret
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    networks:
      internal:
        ipv4_address: "${PGADMIN_HOST}"
    restart: unless-stopped
    depends_on:
      nginx:
        condition: service_healthy
      database:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  portainer:
    # profiles: [ "special" ]
    image: portainer/portainer-ce:2.27.3-alpine
    container_name: portainer
    environment:
      TZ: "Europe/Moscow"
      VIRTUAL_HOST: "${DANVPN_DOMAIN}"
      VIRTUAL_PORT: "${PORTAINER_PORT}"
      LETSENCRYPT_HOST: "${DANVPN_DOMAIN}"
      LETSENCRYPT_EMAIL: "${ADMIN_MAIL}"
    volumes:
      - $DANVPN_VOLUME/portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      internal:
        ipv4_address: "${PORTAINER_HOST}"
    restart: unless-stopped
    depends_on:
      nginx:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ############################
  # METRICS
  ############################

  influxdb:
    image: influxdb:2.7.11-alpine
    container_name: danvpn-influxdb
    environment:
      TZ: "Europe/Moscow"
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: "${INFLUXDB_USER}"
      DOCKER_INFLUXDB_INIT_PASSWORD: "${INFLUXDB_PASS}"
      DOCKER_INFLUXDB_INIT_BUCKET: "${INFLUXDB_NAME}"
      DOCKER_INFLUXDB_INIT_ORG: danvpn
      DOCKER_INFLUXDB_INIT_RETENTION: 90d
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "${INFLUX_ADMIN_TOKEN}"
    volumes:
      - $DANVPN_VOLUME/influxdb/data:/var/lib/influxdb2
      - $DANVPN_VOLUME/influxdb/config:/etc/influxdb2
    networks:
      metrics:
        ipv4_address: "$INFLUXDB_HOST"
    ports:
      - "8086:8086"
    restart: unless-stopped
    depends_on:
      nginx:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  grafana:
    image: grafana/grafana:11.6.0-ubuntu
    container_name: danvpn-grafana
    environment:
      TZ: "Europe/Moscow"
      # GF_SECURITY_ADMIN_USER: "${GRAFANA_USER}"
      # GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_PASS}"
      GF_SERVER_ROOT_URL: "https://$DANVPN_DOMAIN/grafana/"
    volumes:
      - $DANVPN_VOLUME/grafana:/var/lib/grafana
    networks:
      metrics:
        ipv4_address: "${GRAFANA_HOST}"
    restart: unless-stopped
    depends_on:
      nginx:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ############################
  # NETWORK
  ############################

  nginx:
    build: ./src/nginx
    container_name: danvpn-nginx
    environment:
      TZ: "Europe/Moscow"
      DOMAIN: "${DANVPN_DOMAIN}"
      EMAIL: "${ADMIN_MAIL}"
      TEST_WEB: "http://127.0.0.1/healthcheck"
    volumes:
      - $DANVPN_VOLUME/nginx/certs:/etc/letsencrypt
      - $DANVPN_VOLUME/nginx/data/nginx.conf:/etc/nginx/nginx.conf:ro
      - $DANVPN_VOLUME/nginx/data/proxy.conf:/etc/nginx/conf.d/proxy.conf:ro
    networks:
      - internal
      - metrics
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -f $$TEST_WEB || exit 1" ]
      interval: 1m
      timeout: 5s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  internal:
    ipam:
      driver: default
      config:
        - subnet: 10.10.1.0/24
  metrics:
    ipam:
      driver: default
      config:
        - subnet: 10.10.2.0/24
  wgnet:
    ipam:
      driver: default
      config:
        - subnet: 10.10.3.0/24

############################
# PASSWORDS
############################

secrets:
  postgres_secret:
    file: ./.secrets/postgres
  redis_secret:
    file: ./.secrets/redis
  pgadmin_secret:
    file: ./.secrets/pgadmin