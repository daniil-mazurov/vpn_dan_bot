import logging
import os
from typing import Annotated

from fastapi import APIRouter, Depends, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

from server.utils.auth_user import User
from src.core.path import PATH

router = APIRouter()
logger = logging.getLogger()


templates = Jinja2Templates(directory=os.path.join(PATH, "server", "templates"))

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
news_data = [
    {
        "date": "Nov 1, 2024",
        "title": "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ",
        "excerpt": "–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–µ–π—á–∞—Å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω–µ—Ç–µ—Å—å —Å –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º–æ–π –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /bug –∏ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –æ –Ω–µ–π.",
        "id": "news1",
    }
]

news_content = {
    "news1": {
        "title": "üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫! –ü–æ–ª–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π.",
        "content": """
    <p>–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! –ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –Ω–∞—à VPN —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ! üéâ</p>
    <p>–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –Ω–∞–¥–µ–∂–Ω–æ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –∏ –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –±—É–¥–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞–±–æ—Ç–æ–π —Å–µ—Ä–≤–∏—Å–∞, —á—Ç–æ–±—ã —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ª—é–±—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.</p>
    <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –∏ —Å–æ–æ–±—â–∞–π—Ç–µ –æ –ª—é–±—ã—Ö –∑–∞–º–µ—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö. –î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href="/bot/bug/create">—Å—Å—ã–ª–∫–æ–π</a> –ª–∏–±–æ –∫–æ–º–∞–Ω–¥–æ–π `<a href="https://t.me/vpn_dan_bot">/bug</a>` –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ. –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å!</p>""",
    }
}


configs = [
    {
        "name": "Config Name",
        "PrivateKey": "GLzrInt9vGguqXi8r+Dli6K5CCzSe/5Zg8OH8wfk4V8=",
        "Address": "10.1.0.181/32",
        "DNS": " 10.0.0.1,9.9.9.9",
        "PublicKey": "xlaQzDNN/L5VWGVfW2r4pR9ufa0tr0kXwA1U2kilNho=",
        "AllowedIPs": "0.0.0.0/0",
        "Endpoint": "185.242.107.63:51830",
        "PersistentKeepalive": "25",
    }
] * 5


@router.get("/", response_class=HTMLResponse)
async def main_page(request: Request):
    return templates.TemplateResponse(
        "index.html",
        {
            "request": request,
            "news": news_data,
            "news_content": news_content,
        },
    )


# @router.get("/profile", response_class=HTMLResponse)
# async def profile_page(request: Request):
#     return templates.TemplateResponse(
#         "profile.html", {"request": request, "configsData": configs}
#     )


# @router.get("/auth", response_class=HTMLResponse)
# async def auth_page(request: Request):
#     return templates.TemplateResponse("auth.html", {"request": request})


@router.get("/pricing", response_class=HTMLResponse)
async def pricing_page(request: Request):
    return templates.TemplateResponse("pricing.html", {"request": request})


@router.get("/{path:path}", response_class=HTMLResponse)
async def not_found(request: Request):
    return templates.TemplateResponse("404.html", {"request": request})
